{"version":3,"sources":["logo.svg","logic/board_iterators.js","logic/board.js","ui/game.js","App.js","reportWebVitals.js","index.js"],"names":["DIRECTIONS","x","y","iterateCells","cells","start","direction","handler","handleCell","CheckHandler","myColor","hasOtherPieces","endsWithEmptySpace","this","otherColor","WHITE","BLACK","value","endPoint","FlipHandler","flip","piecesToFlip","push","Board","props","handleClick","row","column","state","calculateWinner","isLegalClick","slice","currentPlayer","piece","legalCells","getLegalCells","setState","cellsArray","i","Array","fill","white","black","j","legalCell","player","isValidMove","winner","React","Component","AVAILABLE","Game","RenderBoard","isLegal","Cell","onClick","length","renderCell","className","text","rows","renderRow","buttonClass","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6f06800.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","// thanks https://stackoverflow.com/a/44738696\r\n\r\nimport { BLACK, WHITE } from \"./board\";\r\n\r\nconst DIRECTIONS = [\r\n    {x: 0, y: 1}, {x: 1, y: 1}, {x: 1, y: 0}, {x: 1, y: -1},\r\n    {x: 0, y: -1}, {x: -1, y: -1}, {x: -1, y: 0}, {x: -1, y: 1}\r\n];\r\n\r\n// iteration should start from my pieces only.\r\nconst iterateCells = (cells, start, direction, handler) => {\r\n    for (let x = start.x + direction.x, y = start.y + direction.y;\r\n         x >= 0 && x < 8 && y >=0 && y < 8;\r\n         x += direction.x, y += direction.y) {\r\n        if (!handler.handleCell(x, y, cells[x][y])) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// handler to handle checking\r\nclass CheckHandler {\r\n\r\n    myColor;\r\n    otherColor;\r\n    hasOtherPieces = false;\r\n    endsWithEmptySpace = false;\r\n    endPoint;\r\n\r\n    constructor(myColor) {\r\n        this.myColor = myColor;\r\n        this.otherColor = myColor === WHITE ? BLACK : WHITE;\r\n    }\r\n\r\n    // Returns whether the search in this direction should be continued\r\n    handleCell(x, y, value) {\r\n        this.endPoint = {x, y};\r\n        if (value === this.otherColor) {\r\n            this.hasOtherPieces = true;\r\n            return true;\r\n        }\r\n        if (value === this.myColor) {\r\n            return false;\r\n        }\r\n        if (value == null) {\r\n            this.endsWithEmptySpace = true;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isValidMove() {\r\n        return this.hasOtherPieces && this.endsWithEmptySpace;\r\n    }\r\n\r\n}\r\n\r\nclass FlipHandler {\r\n    myColor;\r\n    otherColor;\r\n    flip = false;\r\n    piecesToFlip = [];\r\n\r\n    constructor(myColor) {\r\n        this.myColor = myColor;\r\n        this.otherColor = myColor === WHITE ? BLACK : WHITE;\r\n    }\r\n\r\n    handleCell(x, y, value) {\r\n        if (value === this.otherColor) {\r\n            this.piecesToFlip.push({x, y});\r\n            return true;\r\n        }\r\n        if (value === this.myColor) {\r\n            this.flip = true;\r\n            return false;\r\n        }\r\n        if (value == null) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport { DIRECTIONS, iterateCells, CheckHandler, FlipHandler };","import React from 'react'\r\nimport { RenderBoard } from \"../ui/game\";\r\nimport {CheckHandler, FlipHandler, DIRECTIONS, iterateCells} from \"./board_iterators\";\r\n\r\nconst BLACK = 'black';\r\nconst WHITE = 'white';\r\nconst AVAILABLE = 'available';\r\nconst TIE = 'tie';\r\n\r\nexport { BLACK, WHITE };\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const cellsArray = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            cellsArray[i] = Array(8).fill(null);\r\n        }\r\n        cellsArray[3][3] = BLACK;\r\n        cellsArray[4][4] = BLACK;\r\n        cellsArray[3][4] = WHITE;\r\n        cellsArray[4][3] = WHITE;\r\n\r\n        this.state = {\r\n            cells: cellsArray,\r\n            currentPlayer: BLACK,\r\n        };\r\n\r\n        this.legalCells = this.getLegalCells(this.state.currentPlayer);\r\n    }\r\n\r\n    calculateWinner() {\r\n        let white = 0;\r\n        let black = 0;\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                switch (this.state.cells[i][j]) {\r\n                    case WHITE:\r\n                        white++;\r\n                        break;\r\n                    case BLACK:\r\n                        black++;\r\n                        break;\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        }\r\n        if (white === black) return TIE;\r\n        if (white > black) return WHITE;\r\n        else return BLACK;\r\n    }\r\n\r\n    isLegalClick(row, column) {\r\n        for (const legalCell of this.legalCells) {\r\n            if (legalCell.x === row && legalCell.y === column) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    handleClick = (row, column) => {\r\n        if (this.state.cells[row][column] != null\r\n            || this.calculateWinner() != null || !this.isLegalClick(row, column)) return;\r\n        const cells = this.state.cells.slice();\r\n        cells[row][column] = this.state.currentPlayer === BLACK ? BLACK : WHITE;\r\n\r\n        // flipping pieces\r\n        for (const direction of DIRECTIONS) {\r\n            const handler = new FlipHandler(this.state.currentPlayer);\r\n            iterateCells(cells, {x: row, y: column}, direction, handler);\r\n            if (handler.flip) {\r\n                for (const piece of handler.piecesToFlip) {\r\n                    cells[piece.x][piece.y] = this.state.currentPlayer;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.legalCells = this.getLegalCells(this.state.currentPlayer === BLACK ? WHITE : BLACK)\r\n\r\n        this.setState({\r\n            cells: cells,\r\n            currentPlayer: this.state.currentPlayer === BLACK ? WHITE : BLACK,\r\n        });\r\n    }\r\n\r\n    // cells which can be taken in the next move\r\n    getLegalCells(player) {\r\n        const cells = [];\r\n        for (let x = 0; x < 8; x++) {\r\n            for (let y = 0; y < 8; y++) {\r\n                // only start iterating from taken spots\r\n                if (this.state.cells[x][y] === player) {\r\n\r\n                    // iterate in all directions\r\n                    for (const direction of DIRECTIONS) {\r\n                        const handler = new CheckHandler(player);\r\n                        iterateCells(this.state.cells, {x, y}, direction, handler);\r\n                        if (handler.isValidMove()) cells.push(handler.endPoint);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    render() {\r\n        // TODO: what if there are no available moves for 1 player or for both\r\n        return <RenderBoard\r\n            winner={this.calculateWinner()}\r\n            currentPlayer={this.state.currentPlayer}\r\n            cells={this.state.cells}\r\n            legalCells={this.legalCells}\r\n            handleClick={this.handleClick}/>;\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\nimport Board from \"../logic/board\";\r\nimport './game.css'\r\n\r\nconst BLACK = 'black';\r\nconst WHITE = 'white';\r\nconst AVAILABLE = 'available';\r\nconst TIE = 'tie';\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Board/>\r\n                Something else\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass RenderBoard extends React.Component {\r\n\r\n    renderCell(row, column) {\r\n        let value;\r\n        let isLegal = false;\r\n        for (const legalCell of this.props.legalCells) {\r\n            if (legalCell.x === row && legalCell.y === column) {\r\n                isLegal = true;\r\n                value = AVAILABLE;\r\n                break;\r\n            }\r\n        }\r\n        if (!isLegal) value = this.props.cells[row][column];\r\n\r\n        return <Cell value={value}\r\n                     onClick={() => this.props.handleClick(row, column)} key={`${row}_${column}`}/>;\r\n    }\r\n\r\n    renderRow(row) {\r\n        const cells = [];\r\n        for (let i = 0; i < this.props.cells[row].length; i++) {\r\n            cells.push(this.renderCell(row, i));\r\n        }\r\n        return <div className=\"board-row\" key={row}>{cells}</div>;\r\n    }\r\n\r\n    render() {\r\n        let text;\r\n        if (this.props.winner) {\r\n            if (this.props.winner === TIE) text = 'Tie';\r\n            else text = 'Winner: ' + this.props.winner;\r\n        } else {\r\n            text = 'Next player: ' + (this.props.currentPlayer === BLACK ? 'black' : 'white');\r\n        }\r\n\r\n        const rows = [];\r\n        for (let i = 0; i < this.props.cells.length; i++) {\r\n            rows.push(this.renderRow(i));\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"status\">{text}</div>\r\n                <div className=\"board\">\r\n                    {rows}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction Cell(props) {\r\n    let buttonClass;\r\n    switch (props.value) {\r\n        case WHITE:\r\n            buttonClass = 'board-cell-white';\r\n            break;\r\n        case BLACK:\r\n            buttonClass = 'board-cell-black';\r\n            break;\r\n        case AVAILABLE:\r\n            buttonClass = 'board-cell-available';\r\n            break;\r\n        default:\r\n            buttonClass = 'board-cell';\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <button className={buttonClass} onClick={props.onClick}>\r\n\r\n        </button>\r\n    );\r\n}\r\n\r\nexport { Game, RenderBoard };","import logo from './logo.svg';\nimport { Game } from './ui/game'\nimport './App.css';\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n<!--<header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>-->\n */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}